---
description: Детальное описание структуры проекта Mantis Dashboard
globs: 
alwaysApply: true
---
# Структура проекта Mantis Dashboard

Этот документ описывает структуру фронтенд-проекта Mantis Material React Dashboard, адаптированного для работы с Django/Python бэкендом.

## Корневая структура проекта

```
full-version/
├── .cursor/           # Конфигурация и правила Cursor IDE
├── .git/              # Git-репозиторий
├── .idea/             # Конфигурация JetBrains IDE
├── .yarn/             # Кэш и конфигурация Yarn
├── dist/              # Сборка проекта для продакшена
├── node_modules/      # Зависимости npm/yarn
├── src/               # Исходный код приложения
├── .env               # Переменные окружения
├── .eslintrc          # Конфигурация линтера ESLint
├── .gitignore         # Игнорируемые Git файлы
├── .prettierrc        # Конфигурация форматирования кода
├── favicon.svg        # Иконка приложения
├── index.html         # Главный HTML-файл
├── jsconfig.json      # Конфигурация JavaScript для IDE
├── package.json       # Зависимости и скрипты npm/yarn
├── README.md          # Документация проекта
├── vite.config.mjs    # Конфигурация сборщика Vite
└── yarn.lock          # Лок-файл Yarn
```

## Структура директории src

```
src/
├── api/               # API-клиенты для работы с бэкендом
├── assets/            # Статические ресурсы (изображения, иконки, шрифты)
├── components/        # Переиспользуемые компоненты
├── contexts/          # React контексты для управления состоянием
├── data/              # Статические данные и мок-данные
├── hooks/             # Пользовательские React-хуки
├── layout/            # Компоненты шаблона и макета
├── menu-items/        # Конфигурация элементов меню
├── pages/             # Страницы приложения
├── routes/            # Конфигурация маршрутизации
├── sections/          # Функциональные блоки организованные по фичам
├── themes/            # Настройки темы Material UI
├── utils/             # Вспомогательные функции и утилиты
├── App.jsx            # Корневой компонент приложения
├── config.js          # Глобальная конфигурация
├── index.jsx          # Точка входа React-приложения
└── vite-env.d.js      # Типы для Vite
```

## Ключевые директории

### components/
Содержит общие переиспользуемые компоненты, разделенные на категории:
- `components/@extended/` - Расширенные компоненты MUI
- `components/cards/` - Компоненты карточек
- `components/logo/` - Логотипы и брендинг
- `components/third-party/` - Интеграции с внешними библиотеками
  - `components/third-party/dropzone/` - Компоненты для загрузки файлов на S3

### contexts/
Содержит React-контексты для управления глобальным состоянием:
- `ConfigContext.jsx` - Конфигурация и настройки приложения
- `JWTContext.jsx` - Аутентификация через JWT
- Другие провайдеры аутентификации (Firebase, Auth0, AWS Cognito, Supabase)

### sections/
Организует код по функциональным возможностям (features):
- `sections/apps/` - Компоненты для конкретных приложений
- `sections/auth/` - Компоненты аутентификации
- `sections/dashboard/` - Компоненты для дашбордов
- `sections/forms/` - Компоненты для форм и ввода данных
- `sections/tables/` - Компоненты для таблиц и отображения данных

### routes/
Управляет маршрутизацией и доступом к страницам:
- Определение маршрутов
- Защищенные маршруты (требующие аутентификации)
- Публичные маршруты

### themes/
Настройка визуального стиля приложения:
- Цветовые схемы
- Темная/светлая тема
- Кастомизация Material UI
- Отзывчивый дизайн

## Реализация загрузки на S3

Загрузка файлов реализована с использованием подхода presigned URLs:

1. Компоненты для загрузки файлов находятся в `components/third-party/dropzone/`
2. Основные файлы для загрузки:
   - `MultiFile.jsx` - Загрузка нескольких файлов
   - `SingleFile.jsx` - Загрузка одного файла
   - `Avatar.jsx` - Загрузка аватара пользователя
   
3. Процесс загрузки:
   - Пользователь выбирает файл(ы)
   - Фронтенд запрашивает у бэкенда presigned URL
   - Бэкенд генерирует URL для прямой загрузки на S3
   - Фронтенд загружает файл напрямую на S3, используя полученный URL
   - После успешной загрузки информация о файле сохраняется в бэкенде

4. API-эндпоинт для получения presigned URL: `http://127.0.0.1:8000/api/v1/project/documents/create_s3/`

## Подход к разработке

- **Feature-Based Architecture**: Код организован по функциональности, а не по типу файлов
- **Component-Driven Development**: UI построен из переиспользуемых компонентов
- **Контекстное управление состоянием**: Глобальное состояние управляется через React Context API
- **Декларативные формы**: Использование Formik + Yup для управления формами и валидации
- **Адаптивный дизайн**: Полная поддержка мобильных устройств через Material UI Grid и медиа-запросы 